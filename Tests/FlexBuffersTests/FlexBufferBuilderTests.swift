//
//  FlexBufferBuilderTests.swift
//  FlexBuffers
//
//  Created by Maxim Zaks on 24.08.17.
//  Copyright Â© 2017 Maxim Zaks. All rights reserved.
//

import XCTest
@testable import FlexBuffers

class FlexBufferBuilderTests: XCTestCase {
    
    func testBuildingVector() {
        let v = try?FlexBufferBuilder.encodeVector {
            $0.add(1)
            $0.add(Int64.min)
            $0.add(UInt(2))
            $0.add(UInt64.max)
            $0.add(3.0)
            $0.add(true)
            $0.add("Hello")
            $0.addString("Hello!")
            $0.addNull()
            $0.addString(["a", "b"])
            $0.add(["a!", "b!"])
            $0.add([1, 2, 3])
            $0.add([UInt(1), 2, 3])
            $0.add([true, false])
            $0.add([1.0, 0.2, 0.5])
            $0.add((1.0, 2.3))
            $0.add((1.0, 2.3, 4.5))
            $0.add((1.0, 2.3, 4.5, 5.6))
            $0.add((1, 2))
            $0.add((1, 2, 4))
            $0.add((1, 2, 4, 7))
            $0.add((UInt(1), 2))
            $0.add((UInt(1), 2, 4))
            $0.add((UInt(1), 2, 4, 7))
            let data = "hello".data(using: .utf8)!
            $0.add(data)
            $0.addVector {
                $0.add(1)
                $0.add(3)
            }
            $0.addMap {
                $0.add("a", 12)
                $0.add("b", 4)
            }
            $0.add([Int64.min, Int64.max])
            $0.add([UInt64.min, UInt64.max])
            $0.indirectAdd(23)
            $0.indirectAdd(UInt.max)
            $0.indirectAdd(Int64.min)
            $0.indirectAdd(UInt64.max)
            $0.indirectAdd(3.5)
        }
        XCTAssertNotNil(v)
        XCTAssertEqual(v?.root?[0]?.asInt, 1)
        XCTAssertEqual(v?.root?[1]?.asInt64, Int64.min)
        XCTAssertEqual(v?.root?[2]?.asUInt, 2)
        XCTAssertEqual(v?.root?[3]?.asUInt64, UInt64.max)
        XCTAssertEqual(v?.root?[4]?.asDouble, 3.0)
        XCTAssertEqual(v?.root?[5]?.asBool, true)
        XCTAssertEqual(v?.root?[6]?.asString, "Hello")
        XCTAssertEqual(v?.root?[7]?.asString, "Hello!")
        XCTAssertEqual(v?.root?[8]?.isNull, true)
        XCTAssertEqual((v?.root?[9]?.asVector?.makeIterator().compactMap{$0.asString})!, ["a", "b"])
        XCTAssertEqual((v?.root?[10]?.asVector?.makeIterator().compactMap{$0.asString})!, ["a!", "b!"])
        XCTAssertEqual((v?.root?[11]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2, 3])
        XCTAssertEqual((v?.root?[12]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2, 3])
        XCTAssertEqual((v?.root?[13]?.asVector?.makeIterator().compactMap{$0.asBool})!, [true, false])
        XCTAssertEqual((v?.root?[14]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.0, 0.2, 0.5])
        XCTAssertEqual((v?.root?[15]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.0, 2.3])
        XCTAssertEqual((v?.root?[16]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.0, 2.3, 4.5])
        XCTAssertEqual((v?.root?[17]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.0, 2.3, 4.5, 5.6])
        XCTAssertEqual((v?.root?[18]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2])
        XCTAssertEqual((v?.root?[19]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2, 4])
        XCTAssertEqual((v?.root?[20]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2, 4, 7])
        XCTAssertEqual((v?.root?[21]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2])
        XCTAssertEqual((v?.root?[22]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2, 4])
        XCTAssertEqual((v?.root?[23]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2, 4, 7])
        XCTAssertEqual(String(data: (v?.root?[24]?.asData)!, encoding: .utf8), "hello")
        XCTAssertEqual((v?.root?[25]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 3])
        XCTAssertEqual((v?.root?[26]?.asMap?.toDict(converter: {$0.asInt}))!, ["a": 12, "b": 4])
        XCTAssertEqual((v?.root?[27]?.asVector?.makeIterator().compactMap{$0.asInt64})!, [Int64.min, Int64.max])
        XCTAssertEqual((v?.root?[28]?.asVector?.makeIterator().compactMap{$0.asUInt64})!, [UInt64.min, UInt64.max])
        XCTAssertEqual((v?.root?[29]?.asInt)!, 23)
        XCTAssertEqual((v?.root?[30]?.asUInt)!, UInt.max)
        XCTAssertEqual((v?.root?[31]?.asInt64)!, Int64.min)
        XCTAssertEqual((v?.root?[32]?.asUInt64)!, UInt64.max)
        XCTAssertEqual((v?.root?[33]?.asDouble)!, 3.5)
    }
    
    func testFromJSONString(){
        let o = try? FlexBufferBuilder.fromJSON("{a:20, b:[1,2,3]}")
        XCTAssertNotNil(o)
        XCTAssertEqual(o?.root?["a"]?.asInt, 20)
        XCTAssertEqual(o?.root?["b"]?[0]?.asInt, 1)
        XCTAssertEqual(o?.root?["b"]?[1]?.asInt, 2)
        XCTAssertEqual(o?.root?["b"]?[2]?.asInt, 3)
    }
    
    func testFromJSONData(){
        let o = try? FlexBufferBuilder.fromJSON("{a:20, b:[1,2,3]}".data(using: .utf8)!)
        XCTAssertNotNil(o)
        XCTAssertEqual(o?.root?["a"]?.asInt, 20)
        XCTAssertEqual(o?.root?["b"]?[0]?.asInt, 1)
        XCTAssertEqual(o?.root?["b"]?[1]?.asInt, 2)
        XCTAssertEqual(o?.root?["b"]?[2]?.asInt, 3)
    }
    
    func testEncodeValues() {
        let v1 = try? FlexBufferBuilder.encode(2)
        XCTAssertEqual(v1?.root?.asInt, 2)
        let v2 = try? FlexBufferBuilder.encode(Int64(-5))
        XCTAssertEqual(v2?.root?.asInt64, -5)
    }
    
    func testBuildingMap() {
        let m = try? FlexBufferBuilder.encodeMap {
            $0.add("a", 1)
            $0.addWithStringKey("b", 2)
            $0.add("c", Int64.max)
            $0.addWithStringKey("d", Int64.min)
            $0.add("e", UInt(1))
            $0.addWithStringKey("f", UInt(2))
            $0.add("g", UInt64.max)
            $0.addWithStringKey("h", UInt64.min)
            $0.add("i", 1.1)
            $0.addWithStringKey("j", 2.2)
            $0.add("k", "Hello")
            $0.addWithStringKey("l", "Hello2")
            $0.addString("m", "Hello3")
            $0.addStringWithStringKey("n", "Hello4")
            $0.add("o", true)
            $0.addWithStringKey("p", false)
            $0.add("q", "Bla".data(using: .utf8)!)
            $0.addWithStringKey("r", "BlaBla".data(using: .utf8)!)
            $0.addNull("s")
            $0.addNullWithStringKey("t")
            $0.indirectAdd("u", Int64.max)
            $0.indirectAddWithStringKey("v", Int64.min)
            $0.indirectAdd("w", UInt(1))
            $0.indirectAddWithStringKey("x", UInt(2))
            $0.indirectAdd("y", UInt64.max)
            $0.indirectAddWithStringKey("z", UInt64.min)
            $0.indirectAdd("aa", 1.1)
            $0.indirectAddWithStringKey("ab", 2.2)
            $0.indirectAdd("ac", 1)
            $0.indirectAddWithStringKey("ad", 2)
            $0.add("ae", (1, 2))
            $0.addWithStringKey("af", (2, 3))
            $0.add("ag", (1, 2, 3))
            $0.addWithStringKey("ah", (2, 3, 4))
            $0.add("ai", (1, 2, 3, 4))
            $0.addWithStringKey("aj", (2, 3, 4, 5))
            $0.add("ak", (UInt(1), 2))
            $0.addWithStringKey("al", (UInt(2), 3))
            $0.add("am", (UInt(1), 2, 3))
            $0.addWithStringKey("an", (UInt(2), 3, 4))
            $0.add("ao", (UInt(1), 2, 3, 4))
            $0.addWithStringKey("ap", (UInt(2), 3, 4, 5))
            $0.add("aq", (1.1, 2.1))
            $0.addWithStringKey("ar", (2.1, 3.1))
            $0.add("as", (1.1, 2.1, 3.1))
            $0.addWithStringKey("at", (2.1, 3.1, 4.1))
            $0.add("au", (1.1, 2.1, 3.1, 4.1))
            $0.addWithStringKey("av", (2.1, 3.1, 4.1, 5.1))
            $0.add("aw", [1, 2])
            $0.addWithStringKey("ax", [2, 3])
            $0.add("ay", [Int64(3), 4])
            $0.addWithStringKey("az", [Int64(5), 6])
            $0.add("ba", [UInt(4), 4])
            $0.addWithStringKey("bb", [UInt(5), 5])
            $0.add("bc", [UInt64(5), 4])
            $0.addWithStringKey("bd", [UInt64(6), 5])
            $0.add("be", [3.5, 4.2])
            $0.addWithStringKey("bf", [6.2, -5.8])
            $0.add("bg", [true, false, true])
            $0.addWithStringKey("bh", [false, false, true])
            $0.add("bi", ["a", "b"])
            $0.addWithStringKey("bj", ["c", "d"])
            $0.addString("bk", ["e", "f"])
            $0.addStringWithStringKey("bl", ["g", "h"])
            $0.addVector("bm") {
                $0.add(1)
                $0.add(3)
                $0.add(4)
            }
            $0.addVectorWithStringKey("bn") {
                $0.add(1)
                $0.add(3)
                $0.add(5)
            }
            $0.addMap("bo") {
                $0.add("a", 12)
            }
            $0.addMapWithStringKey("bp") {
                $0.add("b", true)
            }
        }
        XCTAssertNotNil(m)
        XCTAssertEqual(m?.root?["a"]?.asInt, 1)
        XCTAssertEqual(m?.root?["b"]?.asInt, 2)
        XCTAssertEqual(m?.root?["c"]?.asInt64, Int64.max)
        XCTAssertEqual(m?.root?["d"]?.asInt64, Int64.min)
        XCTAssertEqual(m?.root?["e"]?.asUInt, 1)
        XCTAssertEqual(m?.root?["f"]?.asUInt, 2)
        XCTAssertEqual(m?.root?["g"]?.asUInt64, UInt64.max)
        XCTAssertEqual(m?.root?["h"]?.asUInt64, UInt64.min)
        XCTAssertEqual(m?.root?["i"]?.asDouble, 1.1)
        XCTAssertEqual(m?.root?["j"]?.asDouble, 2.2)
        XCTAssertEqual(m?.root?["k"]?.asString, "Hello")
        XCTAssertEqual(m?.root?["l"]?.asString, "Hello2")
        XCTAssertEqual(m?.root?["m"]?.asString, "Hello3")
        XCTAssertEqual(m?.root?["n"]?.asString, "Hello4")
        XCTAssertEqual(m?.root?["o"]?.asBool, true)
        XCTAssertEqual(m?.root?["p"]?.asBool, false)
        XCTAssertEqual(m?.root?["q"]?.asData, "Bla".data(using: .utf8))
        XCTAssertEqual(m?.root?["r"]?.asData, "BlaBla".data(using: .utf8))
        XCTAssertEqual(m?.root?["s"]?.isNull, true)
        XCTAssertEqual(m?.root?["t"]?.isNull, true)
        XCTAssertEqual(m?.root?["u"]?.asInt64, Int64.max)
        XCTAssertEqual(m?.root?["v"]?.asInt64, Int64.min)
        XCTAssertEqual(m?.root?["w"]?.asUInt, 1)
        XCTAssertEqual(m?.root?["x"]?.asUInt, 2)
        XCTAssertEqual(m?.root?["y"]?.asUInt64, UInt64.max)
        XCTAssertEqual(m?.root?["z"]?.asUInt64, UInt64.min)
        XCTAssertEqual(m?.root?["aa"]?.asDouble, 1.1)
        XCTAssertEqual(m?.root?["ab"]?.asDouble, 2.2)
        XCTAssertEqual(m?.root?["ac"]?.asInt, 1)
        XCTAssertEqual(m?.root?["ad"]?.asInt, 2)
        XCTAssertEqual((m?.root?["ae"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2])
        XCTAssertEqual((m?.root?["af"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [2, 3])
        XCTAssertEqual((m?.root?["ag"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2, 3])
        XCTAssertEqual((m?.root?["ah"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [2, 3, 4])
        XCTAssertEqual((m?.root?["ai"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2, 3, 4])
        XCTAssertEqual((m?.root?["aj"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [2, 3, 4, 5])
        XCTAssertEqual((m?.root?["ak"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2])
        XCTAssertEqual((m?.root?["al"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [2, 3])
        XCTAssertEqual((m?.root?["am"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2, 3])
        XCTAssertEqual((m?.root?["an"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [2, 3, 4])
        XCTAssertEqual((m?.root?["ao"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [1, 2, 3, 4])
        XCTAssertEqual((m?.root?["ap"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [2, 3, 4, 5])
        XCTAssertEqual((m?.root?["aq"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.1, 2.1])
        XCTAssertEqual((m?.root?["ar"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [2.1, 3.1])
        XCTAssertEqual((m?.root?["as"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.1, 2.1, 3.1])
        XCTAssertEqual((m?.root?["at"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [2.1, 3.1, 4.1])
        XCTAssertEqual((m?.root?["au"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [1.1, 2.1, 3.1, 4.1])
        XCTAssertEqual((m?.root?["av"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [2.1, 3.1, 4.1, 5.1])
        XCTAssertEqual((m?.root?["aw"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 2])
        XCTAssertEqual((m?.root?["ax"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [2, 3])
        XCTAssertEqual((m?.root?["ay"]?.asVector?.makeIterator().compactMap{$0.asInt64})!, [3, 4])
        XCTAssertEqual((m?.root?["az"]?.asVector?.makeIterator().compactMap{$0.asInt64})!, [5, 6])
        XCTAssertEqual((m?.root?["ba"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [4, 4])
        XCTAssertEqual((m?.root?["bb"]?.asVector?.makeIterator().compactMap{$0.asUInt})!, [5, 5])
        XCTAssertEqual((m?.root?["bc"]?.asVector?.makeIterator().compactMap{$0.asUInt64})!, [5, 4])
        XCTAssertEqual((m?.root?["bd"]?.asVector?.makeIterator().compactMap{$0.asUInt64})!, [6, 5])
        XCTAssertEqual((m?.root?["be"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [3.5, 4.2])
        XCTAssertEqual((m?.root?["bf"]?.asVector?.makeIterator().compactMap{$0.asDouble})!, [6.2, -5.8])
        XCTAssertEqual((m?.root?["bg"]?.asVector?.makeIterator().compactMap{$0.asBool})!, [true, false, true])
        XCTAssertEqual((m?.root?["bh"]?.asVector?.makeIterator().compactMap{$0.asBool})!, [false, false, true])
        XCTAssertEqual((m?.root?["bi"]?.asVector?.makeIterator().compactMap{$0.asString})!, ["a", "b"])
        XCTAssertEqual((m?.root?["bj"]?.asVector?.makeIterator().compactMap{$0.asString})!, ["c", "d"])
        XCTAssertEqual((m?.root?["bk"]?.asVector?.makeIterator().compactMap{$0.asString})!, ["e", "f"])
        XCTAssertEqual((m?.root?["bl"]?.asVector?.makeIterator().compactMap{$0.asString})!, ["g", "h"])
        XCTAssertEqual((m?.root?["bm"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 3, 4])
        XCTAssertEqual((m?.root?["bn"]?.asVector?.makeIterator().compactMap{$0.asInt})!, [1, 3, 5])
        XCTAssertEqual((m?.root?["bo"]?.asMap?.toDict{$0.asInt})!, ["a": 12])
        XCTAssertEqual((m?.root?["bp"]?.asMap?.toDict{$0.asBool})!, ["b": true])
    }
}
